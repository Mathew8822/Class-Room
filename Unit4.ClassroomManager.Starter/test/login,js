const request = require('supertest');
const express = require('express');
const { PrismaClient } = require('@prisma/client');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const router = require('../server/auth/index'); // Replace with the correct path to your router file

// Create an Express app and use the router
const app = express();
app.use(express.json());
app.use('/', router);

// Mock PrismaClient
jest.mock('@prisma/client', () => {
  const mockPrisma = {
    instructor: {
      findUnique: jest.fn(),
    },
  };
  return { PrismaClient: jest.fn(() => mockPrisma) };
});

const prisma = new PrismaClient();

// Mock bcrypt and jwt
jest.mock('bcryptjs');
jest.mock('jsonwebtoken');

describe('POST /login', () => {
  it('should log in successfully with correct credentials', async () => {
    const username = 'testuser';
    const password = 'password123';
    const hashedPassword = await bcrypt.hash(password, 10);
    const token = 'valid-token';

    // Mock PrismaClient method implementation
    prisma.instructor.findUnique.mockResolvedValue({ id: 1, username, password: hashedPassword });

    // Mock bcrypt comparison
    bcrypt.compare.mockResolvedValue(true);

    // Mock jwt sign
    jwt.sign.mockReturnValue(token);

    // Make request using Supertest
    const res = await request(app)
      .post('/login')
      .send({ username, password })
      .expect(200);

    // Verify the response
    expect(res.body).toEqual({ token });
  });

  it('should return 401 if username does not exist', async () => {
    const username = 'nonexistentuser';
    const password = 'password123';

    // Mock PrismaClient method implementation
    prisma.instructor.findUnique.mockResolvedValue(null);

    // Make request using Supertest
    const res = await request(app)
      .post('/login')
      .send({ username, password })
      .expect(401);

    // Verify the response
    expect(res.text).toBe('Invalid login credentials.');
  });

  it('should return 402 if password is incorrect', async () => {
    const username = 'testuser';
    const password = 'wrongpassword';
    const hashedPassword = await bcrypt.hash('correctpassword', 10);

    // Mock PrismaClient method implementation
    prisma.instructor.findUnique.mockResolvedValue({ id: 1, username, password: hashedPassword });

    // Mock bcrypt comparison
    bcrypt.compare.mockResolvedValue(false);

    // Make request using Supertest
    const res = await request(app)
      .post('/login')
      .send({ username, password })
      .expect(402);

    // Verify the response
    expect(res.text).toBe('Wrong login credentials.');
  });
});
